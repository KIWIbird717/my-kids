/**
 * Change the type of Keys of T from NewType
 *
 * @example
 * // initial type
 * type User = {
 *   id: number
 *   name: string
 *   age: number
 *   hobbies: []
 * }
 * // use `ChangeTypeOfKeys` utility type
 * type OtherUser = ChangeTypeOfKeys<User, 'id' | 'age', string>
 * // now we have type with changed keys type
 * type OtherUser = {
 *  id: string
 *  name: string
 *  age: string
 *  hobbies: []
 * }
 */
export type ChangeTypeOfKeys<T extends object, Keys extends keyof T, NewType> = {
  [key in keyof T]: key extends Keys ? NewType : T[key];
};

/**
 * Remove null and undefined from T
 */
export type NonNullable<T> = Exclude<T, null | undefined>;

/**
 * If you want a partial implementation that works recursively on
 * objects then you can use the following type (only applied for TS 4.1+):
 *
 * @example
 * type myObjectType = {
 *   user: {
 *     firstName: string,
 *     lastName: string,
 *     dopInfo: {
 *       location: string,
 *       geoposition: string
 *     }
 *   },
 *   currency: {
 *     current: stirng,
 *     amount: number,
 *   }
 * }
 *
 * type myDeapPartialObjectType = DeepPartial<myObjectType>
 * // now it has type like in example below üëá
 * type myDeapPartialObjectType = {
 *   user: {
 *     firstName: string | null,
 *     lastName: string | null,
 *     dopInfo: {
 *       location: string | null,
 *       geoposition: string | null,
 *     } | null
 *   } | null,
 *   currency: {
 *     current: stirng | null,
 *     amount: number | null,
 *   } | null
 * }
 */
type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

/**
 * O–±—ä–µ–¥–∏–Ω—è–µ—Ç 2 —Ç–∏–∞–∞ –æ–±—ä–µ–∫—Ç–æ–≤
 * –°—Å—ã–ª–∫–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º: https://habr.com/ru/articles/526998/
 */
export type DeepMergeTwoTypes<T, U> =
  // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Ç–∏–ø—ã –º–∞—Å—Å–∏–≤–∞–º–∏, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏—Ö –∏
  // –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏—é
  [T, U] extends [(infer TItem)[], (infer UItem)[]]
    ? DeepMergeTwoTypes<TItem, UItem>[]
    : // –µ—Å–ª–∏ —Ç–∏–ø—ã —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã
      [T, U] extends [{ [key: string]: unknown }, { [key: string]: unknown }]
      ? MergeTwoObjects<T, U>
      : [T, U] extends [
            { [key: string]: unknown } | undefined,
            { [key: string]: unknown } | undefined,
          ]
        ? MergeTwoObjects<NonNullable<T>, NonNullable<U>> | undefined
        : T | U;

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
 * –í–∑—è–ª –æ—Ç —Å—é–¥–∞: https://stackoverflow.com/questions/51851677/how-to-get-argument-types-from-function-in-typescript
 */
type ArgumentTypes<F extends Function> = F extends (...args: infer A) => any ? A : never;

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ
 * –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∞–ø–∞ –≤ IDE
 */
type Prettify<T> = {
  [K in keyof T]: T[K];
} & {};

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * interface MyType {
 *   required: string;
 *   optional: number;
 *   anotherRequired: boolean;
 * }
 *
 * –î–µ–ª–∞–µ–º –ø–æ–ª–µ "optional" –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
 * type MyPartialType = MakeFieldsPartial<MyType, 'optional'>;
 *
 * –¢–µ–ø–µ—Ä—å –ø–æ–ª–µ "optional" –≤ MyPartialType —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
 */
export type MakeFieldsPartial<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
